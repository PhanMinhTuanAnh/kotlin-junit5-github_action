name: Pull Request Action

on:
  workflow_dispatch:
    inputs:
      pr_title:
        description: 'PR Title'
        required: true
        type: string

jobs:
  create-pull-request:
    runs-on: ubuntu-latest
    steps:
      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v6
        env:
          PR_TITLE: ${{ inputs.pr_title }}
        with:
          script: |
            const { repo, owner } = context.repo;
            const { PR_TITLE } = process.env
            const result = await github.rest.pulls.create({
              title: ${PR_TITLE},
              owner,
              repo,
              head: 'main',
              base: 'develop',
              draft: true,
              body: [
                'This PR is auto-generated by',
                '[actions/github-script](https://github.com/actions/github-script).'
              ].join('\n')
            });
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['feature', 'automated pr']
            });
            return result.data.node_id.toString();
          result-encoding: string

      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
          USER: PhanMinhTuanAnh
          PROJECT_NUMBER: 2
        run: |
          gh api graphql -f query='
          query($usr: String!, $number: Int!) {
           user(login: $usr){
             projectV2(number: $number) {
               id
               fields(first:20) {
                 nodes {
                   ... on ProjectV2Field {
                     id
                     name
                   }
                   ... on ProjectV2SingleSelectField {
                     id
                     name
                     options {
                       id
                       name
                     }
                   }
                 }
               }
             }
           }
          }' -f usr=$USER -F number=$PROJECT_NUMBER > project_data.json
          
          echo 'PROJECT_ID='$(jq '.data.user.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TODO_OPTION_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="In Progress") |.id' project_data.json) >> $GITHUB_ENV

      - name: Add PR to project
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
          PR_ID: ${{ steps.create-pr.outputs.result }}
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $pr:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $pr}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f pr=$PR_ID --jq '.data.addProjectV2ItemById.item.id')"
          
            echo 'ITEM_ID='$item_id >> $GITHUB_ENV

      - name: Set fields
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: { 
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                  }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.TODO_OPTION_ID }} --silent
